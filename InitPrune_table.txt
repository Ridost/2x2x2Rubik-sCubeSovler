void initial_pruning_table_five()
{
	string Rtable[6] = {"R ","R'","U ","U'","B ","B'"};
	int i=-1;
	ofstream fout;
	fout.open("Prune_table_five.txt");

	while(1){
		i=base6(i);
		if(i==55555)break;      // operation length
		string Rnum = to_string((long long)i);
		Rnum.insert(Rnum.begin(),5-Rnum.length(),'0');  // 補0到operation length
		//非連續三個重複
		if((Rnum[0]==Rnum[1] && Rnum[0]==Rnum[2]) || (Rnum[1]==Rnum[2] && Rnum[1]==Rnum[3]) ||
			(Rnum[2]==Rnum[3] && Rnum[2]==Rnum[4]))    //判斷到 Rnum[operation length]
			continue;
		//非正逆
		bool counterwise = 0;
		for(int i2=0;i2<4;i2++){    //判斷到 operation length-1
			if(Rnum[i2]==counter(Rnum[i2+1]))	counterwise = 1;
		}
		if(counterwise==1)	continue;

		string ch;
		for(int j=0;j<5;j++){       //到 operation length
			ch=Rtable[(Rnum[j])-48];
			fout<<ch;
		}
		fout<<"  ";     //補空格到 12 char
		char t_cube[6][4]={
			{'0','0','0','0'},
			{'1','1','1','1'},
			{'2','2','2','2'},
			{'3','3','3','3'},
			{'4','4','4','4'},
			{'5','5','5','5'}
		};
		for(int j=4;j>=0;j--)
		{
			string input;
			Rnum[j]=counter(Rnum[j]);
			input=Rtable[Rnum[j]-48];
			if(input!="x"){

			if(input[0]=='U'){
				if(input[1]=='\'')Rotate_U(t_cube,1);
				else if(input[1]=='2'){Rotate_U(t_cube,0);Rotate_U(t_cube,0);}
				else Rotate_U(t_cube,0);
			}
			else if(input[0]=='R'){
				if(input[1]=='\'')Rotate_R(t_cube,1);
				else if(input[1]=='2'){Rotate_R(t_cube,0);Rotate_R(t_cube,0);}
				else Rotate_R(t_cube,0);
			}
			else if(input[0]=='B'){
				if(input[1]=='\'')Rotate_B(t_cube,1);
				else if(input[1]=='2'){Rotate_B(t_cube,0);Rotate_B(t_cube,0);}
				else Rotate_B(t_cube,0);
			}
			else{
				printf("Error\n");
				break;}
		}
		else break;
		}
		for(int j=0;j<6;j++)
		{
			fout.put(t_cube[j][0]);
			fout.put(t_cube[j][1]);
			fout.put(t_cube[j][2]);
			fout.put(t_cube[j][3]);
		}
		fout<<endl;
	}
	fout.close();
}
void initial_pruning_table_four()
{
	string Rtable[6] = {"R ","R'","U ","U'","B ","B'"};
	int i=-1;
	ofstream fout;
	fout.open("Prune_table_four.txt");

	while(1){
		i=base6(i);
		if(i==5555)break;      // operation length
		string Rnum = to_string((long long)i);
		Rnum.insert(Rnum.begin(),4-Rnum.length(),'0');  // 補0到operation length
		//非連續三個重複
		if((Rnum[0]==Rnum[1] && Rnum[0]==Rnum[2]) || (Rnum[1]==Rnum[2] && Rnum[1]==Rnum[3]))    //判斷到 Rnum[operation length]
			continue;
		//非正逆
		bool counterwise = 0;
		for(int i2=0;i2<3;i2++){    //判斷到 operation length-1
			if(Rnum[i2]==counter(Rnum[i2+1]))	counterwise = 1;
		}
		if(counterwise==1)	continue;

		string ch;
		for(int j=0;j<4;j++){       //到 operation length
			ch=Rtable[(Rnum[j])-48];
			fout<<ch;
		}
		fout<<"    ";     //補空格到 12 char
		char t_cube[6][4]={
			{'0','0','0','0'},
			{'1','1','1','1'},
			{'2','2','2','2'},
			{'3','3','3','3'},
			{'4','4','4','4'},
			{'5','5','5','5'}
		};
		for(int j=3;j>=0;j--)
		{
			string input;
			Rnum[j]=counter(Rnum[j]);
			input=Rtable[Rnum[j]-48];
			if(input!="x"){

			if(input[0]=='U'){
				if(input[1]=='\'')Rotate_U(t_cube,1);
				else if(input[1]=='2'){Rotate_U(t_cube,0);Rotate_U(t_cube,0);}
				else Rotate_U(t_cube,0);
			}
			else if(input[0]=='R'){
				if(input[1]=='\'')Rotate_R(t_cube,1);
				else if(input[1]=='2'){Rotate_R(t_cube,0);Rotate_R(t_cube,0);}
				else Rotate_R(t_cube,0);
			}
			else if(input[0]=='B'){
				if(input[1]=='\'')Rotate_B(t_cube,1);
				else if(input[1]=='2'){Rotate_B(t_cube,0);Rotate_B(t_cube,0);}
				else Rotate_B(t_cube,0);
			}
			else{
				printf("Error\n");
				break;}
		}
		else break;
		}
		for(int j=0;j<6;j++)
		{
			fout.put(t_cube[j][0]);
			fout.put(t_cube[j][1]);
			fout.put(t_cube[j][2]);
			fout.put(t_cube[j][3]);
		}
		fout<<endl;
	}
	fout.close();
}
void initial_pruning_table_one()
{
	string Rtable[6] = {"R ","R'","U ","U'","B ","B'"};
	int i=-1;
	ofstream fout;
	fout.open("Prune_table_one.txt");

	while(1){
		i=base6(i);
		if(i==10)break;      // operation length
		string Rnum = to_string((long long)i);
		//Rnum.insert(Rnum.begin(),1-Rnum.length(),'0');  // 補0到operation length
		//非連續三個重複
		/*
		if((Rnum[0]==Rnum[1] && Rnum[0]==Rnum[2]) || (Rnum[1]==Rnum[2] && Rnum[1]==Rnum[3]) ||
			(Rnum[2]==Rnum[3] && Rnum[2]==Rnum[4]))    //判斷到 Rnum[operation length]
			continue;
		//非正逆
		bool counterwise = 0;
		for(int i2=0;i2<4;i2++){    //判斷到 operation length-1
			if(Rnum[i2]==counter(Rnum[i2+1]))	counterwise = 1;
		}
		if(counterwise==1)	continue;
        */
		string ch;
		for(int j=0;j<1;j++){       //到 operation length
			ch=Rtable[(Rnum[j])-48];
			fout<<ch;
		}
		fout<<"          ";     //補空格到 12 char
		char t_cube[6][4]={
			{'0','0','0','0'},
			{'1','1','1','1'},
			{'2','2','2','2'},
			{'3','3','3','3'},
			{'4','4','4','4'},
			{'5','5','5','5'}
		};
		for(int j=0;j>=0;j--)
		{
			string input;
			Rnum[j]=counter(Rnum[j]);
			input=Rtable[Rnum[j]-48];
			if(input!="x"){

			if(input[0]=='U'){
				if(input[1]=='\'')Rotate_U(t_cube,1);
				else if(input[1]=='2'){Rotate_U(t_cube,0);Rotate_U(t_cube,0);}
				else Rotate_U(t_cube,0);
			}
			else if(input[0]=='R'){
				if(input[1]=='\'')Rotate_R(t_cube,1);
				else if(input[1]=='2'){Rotate_R(t_cube,0);Rotate_R(t_cube,0);}
				else Rotate_R(t_cube,0);
			}
			else if(input[0]=='B'){
				if(input[1]=='\'')Rotate_B(t_cube,1);
				else if(input[1]=='2'){Rotate_B(t_cube,0);Rotate_B(t_cube,0);}
				else Rotate_B(t_cube,0);
			}
			else{
				printf("Error\n");
				break;}
		}
		else break;
		}
		for(int j=0;j<6;j++)
		{
			fout.put(t_cube[j][0]);
			fout.put(t_cube[j][1]);
			fout.put(t_cube[j][2]);
			fout.put(t_cube[j][3]);
		}
		fout<<endl;
	}
	fout.close();
}
void initial_pruning_table()
{
	int i=-1;
	ofstream fout;
	fout.open("Prune_table.txt");

	while(1){
		i=base6(i);
		if(i==555555)break;
		string Rnum = to_string((long long)i);
		Rnum.insert(Rnum.begin(),6-Rnum.length(),'0');
		//非連續三個重複
		if((Rnum[0]==Rnum[1] && Rnum[0]==Rnum[2]) || (Rnum[1]==Rnum[2] && Rnum[1]==Rnum[3]) ||
			(Rnum[2]==Rnum[3] && Rnum[2]==Rnum[4]) ||(Rnum[3]==Rnum[4] && Rnum[3]==Rnum[5]))
			continue;
		//非正逆
		bool counterwise = 0;
		for(int i2=0;i2<5;i2++){
			if(Rnum[i2]==counter(Rnum[i2+1]))	counterwise = 1;
		}
		if(counterwise==1)	continue;

		string ch;
		for(int j=0;j<6;j++){
			ch=Rtable[(Rnum[j])-48];
			fout<<ch;
		}
		char t_cube[6][4]={
			{'0','0','0','0'},
			{'1','1','1','1'},
			{'2','2','2','2'},
			{'3','3','3','3'},
			{'4','4','4','4'},
			{'5','5','5','5'}
		};
		for(int j=5;j>=0;j--)
		{
			string input;
			Rnum[j]=counter(Rnum[j]);
			input=Rtable[Rnum[j]-48];
			if(input!="x"){

			if(input[0]=='U'){
				if(input[1]=='\'')Rotate_U(t_cube,1);
				else if(input[1]=='2'){Rotate_U(t_cube,0);Rotate_U(t_cube,0);}
				else Rotate_U(t_cube,0);
			}
			else if(input[0]=='R'){
				if(input[1]=='\'')Rotate_R(t_cube,1);
				else if(input[1]=='2'){Rotate_R(t_cube,0);Rotate_R(t_cube,0);}
				else Rotate_R(t_cube,0);
			}
			else if(input[0]=='B'){
				if(input[1]=='\'')Rotate_B(t_cube,1);
				else if(input[1]=='2'){Rotate_B(t_cube,0);Rotate_B(t_cube,0);}
				else Rotate_B(t_cube,0);
			}
			else{
				printf("Error\n");
				break;}
		}
		else break;
		}
		for(int j=0;j<6;j++)
		{
			fout.put(t_cube[j][0]);
			fout.put(t_cube[j][1]);
			fout.put(t_cube[j][2]);
			fout.put(t_cube[j][3]);
		}
		fout<<endl;
	}
	fout.close();
}
int base6(int in_num)
{
    //cout<<in_num<<" ";
	//in_num=000000
	int out_num=0,temp,i;
	temp=in_num+1;
	for(i=0;i<6;i++)
	{
		if(temp%10==6){
			temp = (temp/10)+1;
		}
		else{
			out_num+=(int)round(((temp%10)*(pow((double)10,(double)i))));
			//cout<<out_num<<": "<<(temp%10)<<"  "<<pow(10,(double)i)<<"  result :"<<(temp%10)*(pow((double)10,(double)i))<<endl;
			temp/=10;
		}
	}
    //cout<<(5%10)*(int)(pow((double)10,(double)2))<<endl;
	return out_num;
}
